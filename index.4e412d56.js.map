{"mappings":"qhBAAAA,EAAA,S,iCCAA,IAAAC,EAAAD,EAAA,S,0BAaA,MAAME,EAAe,GAAGC,EAAAC,0BAElBC,EAAgBC,SAASC,cAAc,wBAE7C,IAAIC,EACAC,EACAC,EAiBJ,SAASC,EAAcC,GAWvB,IAA0BC,EAVxBJ,EAAUG,EAAME,OAAOC,QAAQC,QAUPH,EATPJ,GAUb,EAAAQ,EAAAC,qBAAoBL,KACtB,EAAAI,EAAAE,wBAAuBN,GACvBH,EAAUU,YAAc,eAExB,EAAAH,EAAAI,mBAAkBR,GAClBH,EAAUU,YAAc,uBAd1B,IAAIE,EAAad,EAAYe,MACC,wBAA1Bb,EAAUU,YAIdI,EAAAvB,GAASwB,OAAOC,QAAQ,IAAIJ,2BAH1BE,EAAAvB,GAASwB,OAAOC,QAAQ,IAAIJ,8B,CA8GhCK,eAAeC,EAAcC,GAC3B,MAGMC,QAAiBC,MAAM,yGACvBC,QAAaF,EAASG,OAO5B,OALmBJ,EAASK,KAAIC,GAChBH,EAAKI,OAAOC,MAAKC,GAASA,EAAMC,KAAOJ,IACxCK,OAGGC,KAAK,K,EAjGzBd,iBACE,IACE,MACMe,SA7CVf,iBACE,OAAOI,MACL,GAAG7B,aAAwBC,EAAAwC,iCAC3BC,MAAKC,IACL,IAAKA,EAAUC,GAEb,MADAtB,EAAAvB,GAASwB,OAAOsB,QAAQ,gDAClB,IAAIC,MAAMH,EAAUI,QAE5B,OAAOJ,EAAUZ,MAAM,G,CAoCJiB,IACSC,QAE5B,GAAIT,EAAeU,QAAU,EAAG,CAC9B5C,EACEkC,EAAeW,KAAKC,MAAMD,KAAKE,SAAWb,EAAeU,SAC3D,MAAMI,QAAmB5B,EAAcpB,EAAYiD,WAC7CC,QAYZ/B,gBAA4BY,GAC1BA,EAAEoB,YACFA,EAAWC,cACXA,EAAarC,MACbA,EAAKsC,SACLA,EAAQC,WACRA,EAAUC,aACVA,EAAYC,WACZA,EAAUC,aACVA,EAAYR,UACZA,IAEA,MAAMD,QAAmB5B,EAAc6B,GAEvC,MAAO,uLAMmDG,iIACAA,+HACAD,yFACNA,2KAMNpC,8TAI2G0C,+SAI1DF,4KAGhEC,+XAOqHF,sPAGLN,yMAM5FK,2EACctB,mE,CArEjC2B,CAAa,IAAK1D,E,WAAagD,IAC3DnD,EAAc8D,mBAAmB,YAAaT,GAC9ChD,EAAYJ,SAASC,cAAc,4BAnBf6D,EAoBH3D,EApBY4D,EAoBH3D,GAnB1B,EAAAO,EAAAC,qBAAoBkD,GACtBC,EAAUjD,YAAc,sBAExBiD,EAAUjD,YAAc,YAiBtBV,EAAU4D,iBAAiB,QAAS3D,E,EAEtC,MAAO4D,GACPC,QAAQC,IAAIF,E,CAxBhB,IAA0BH,EAASC,C,CA2BnCK,G,uDCrFA,IAAAC,EAAA3E,EAAA,S,aAAA,MAKM4E,EAActE,SAASC,cAAc,yBA+CpCoB,eAAekD,IAGpB,MAAO,CAAEzC,aAtCXT,iBACE,MAAMK,KAAEA,SAAe2C,EAAAG,QAAMC,IAC3B,GAAG5E,EAAAC,qCAAqCD,EAAAwC,WAE1C,OAAOX,C,CAgCcgD,GAAiBpC,MAAK,EAACR,OAAEA,KAAaA,I,CAM7D,SAAS6C,EAAa9B,GAEnB0B,IAAYjC,MAAK,EAACR,OAAEA,MAEnB,GAAIe,EAAS,CACXA,EAAQ+B,SAAQC,IACd,MAAM1B,UAAEA,EAASQ,aAAEA,GAAiBkB,EACpC/C,EAAO8C,SAAQ,EAAC1C,KAAEA,EAAID,GAAEA,MAClBkB,EAAU2B,SAAS7C,KACjBkB,EAAUL,OAAS,GACrBK,EAAU4B,OAAO,EAAG5B,EAAUL,OAAS,GAEzCK,EAAU4B,OAAO5B,EAAU6B,QAAQ/C,GAAK,EAAGC,IAE7C2C,EAAKI,YAAc9B,EAAUhB,KAAK,MAC9B0C,EAAKlB,eAAekB,EAAKlB,aAAeA,EAAauB,MAAM,EAAG,GAAE,GACpE,IAEJ,MAAMC,EAUZ,SAAsBtC,GAEpB,OAAOA,EAAQqC,MAAM,EAAG,GAAGtD,KAAI,EAACwD,eAAEA,EAAczB,aAAEA,EAAYR,UAAEA,EAASE,YAAEA,EAAWI,aAAEA,EAAYxB,GAAEA,MACpG,IAAIoD,EAAY,GAEdA,EADEhC,EACU,GAAGxD,EAAAyF,eAAezF,EAAA0F,WAAWlC,IAE7B,mCAGd,IAAImC,EAAY,GAChB,IAAK,IAAIC,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC3B,IAAIC,EAAY,YACR,EAAJD,EAAQhC,EACViC,EAAY,UACC,EAAJD,EAAQ,EAAIhC,IACrBiC,EAAY,kBAEdF,GAAa,wBAAwBE,a,CAEvC,MAAQ,gEAAgEzD,mEAC1BoD,WAAmBD,8BAA2CnD,mJAG/DmD,8HAG5BjC,OAAeQ,qHAKlB6B,4CAGR,IACLrD,KAAK,G,CA9CewD,CAAa9C,GAC9ByB,IACFA,EAAYsB,UAAYT,E,KArEnBd,EAAAG,QAAMC,IAFL,6FAEcnC,MAAMZ,GAGhBA,EAAKA,OA6HyBY,MAAK,EAACO,QAAEA,KAE3C8B,EAAa9B,K","sources":["src/index.js","src/js/upcoming.js","src/js/weekly.js"],"sourcesContent":["import './js/api-vars';\nimport './js/spiner';\nimport './js/api-service';\nimport './js/teamModal';\nimport './js/team';\nimport './js/upcoming';\nimport './js/refs';\nimport './js/render';\nimport './js/my-library';\nimport './js/header';\nimport './js/btn-up';\nimport './js/weekly';\nimport './js/modal-descr';\nimport './js/modal-trailer';\n","import Notiflix from 'notiflix';  \nimport axios from 'axios';\nimport {\n  API_KEY,\n  BASE_URL,\n  TREND_URL,\n  SEARCH_URL,\n  ID_URL,\n  IMG_BASE_URL,\n  IMG_W400,\n} from './api-vars';\nimport { addMovieToLibrary, removeMovieFromLibrary, getMovieFromLibrary} from './my-library';\n\nconst UPCOMING_URL = `${BASE_URL}/movie/upcoming`;\n\nconst upcomingBlock = document.querySelector('.container__upcoming');\n\nlet randomMovie;\nlet movieId;\nlet remindBtn;\n\n\n// FETCH FOR UPCOMIG MOVIES\n\nasync function fetchUpcomingMovies() {\n  return fetch(\n    `${UPCOMING_URL}?api_key=${API_KEY}&language=en-US&page=1`\n  ).then(movieData => {\n    if (!movieData.ok) {\n      Notiflix.Notify.failure(`Sorry, there are no upcoming films for today`);\n      throw new Error(movieData.status);\n    }\n    return movieData.json();\n  });\n}\n\nfunction onClickRemind(event) {\n  movieId = event.target.dataset.movieid;\n  AddFilmToLibrary(movieId);\n  let titleMovie = randomMovie.title;\n  if (remindBtn.textContent !== 'Remove from Library') {\n    Notiflix.Notify.success(`\"${titleMovie}\" removed from the library`);\n    return;\n  }\n  Notiflix.Notify.success(`\"${titleMovie}\" added to the library`);\n}\n\nfunction AddFilmToLibrary(movieId) {\n  if (getMovieFromLibrary(movieId)) {\n    removeMovieFromLibrary(movieId);\n    remindBtn.textContent = \"Remind me\";\n  } else {\n    addMovieToLibrary(movieId);\n    remindBtn.textContent = \"Remove from Library\";\n  }\n}\n\n//Перевірка фільма у локольному сховищу та обробка  кнопки\nfunction changeBtnLibrary(movieId, remindBtn) {\n  if (getMovieFromLibrary(movieId)) {\n    remindBtn.textContent = \"Remove from Library\";\n  } else {\n    remindBtn.textContent = \"Remind me\";\n  }\n}\n\nasync function getFetchedMovies() {\n  try {\n    const data = await fetchUpcomingMovies();\n    const returnedResult = data.results;\n\n    if (returnedResult.length >= 1) {\n      randomMovie =\n        returnedResult[Math.floor(Math.random() * returnedResult.length)];\n      const genreNames = await getGenresById(randomMovie.genre_ids);\n      const createdMarkup = await renderMarkup({ ...randomMovie, genreNames });\n      upcomingBlock.insertAdjacentHTML('beforeend', createdMarkup);\n      remindBtn = document.querySelector('.upcoming__remindme--btn');\n      changeBtnLibrary(movieId, remindBtn);\n      remindBtn.addEventListener('click', onClickRemind);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\ngetFetchedMovies();\n\nasync function renderMarkup({\n  id,\n  poster_path,\n  backdrop_path,\n  title,\n  overview,\n  popularity,\n  vote_average,\n  vote_count,\n  release_date,\n  genre_ids,\n}) {\n  const genreNames = await getGenresById(genre_ids);\n\n  return `\n    \n <div class=\"upcoming__card\">\n <div class=\"upcoming__thumb\">\n      \n      <picture class='.upcoming__poster'>\n      <source srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" media=\"(min-width: 1200px)\" class='upcoming__poster-desktop' />\n      <source srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" media=\"(min-width: 768px)\" class='upcoming__poster-tablet' />\n      <source srcset=\"https://image.tmdb.org/t/p/original/${poster_path}\" media=\"(min-width: 320px)\" />\n      <img src=\"https://image.tmdb.org/t/p/original/${poster_path}\" alt=\"Movie Poster\" style='width: 805px'/>\n    </picture>\n      </div>\n      </div>\n\n<div class=\"upcoming__info\">\n            <h2 class=\"upcoming__info--title\">${title}</h2>\n            <div class=\"upcoming__movie\">\n                <div class=\"upcoming__info--left\">\n                    <div class=\"upcoming__info--release\">\n                        <p class=\"upcoming__text\"> <span class =\"upcoming__light--black\">Release date</span> <span class=\"upcoming__info--release--date\">${release_date}</span></p>\n                    </div>\n                    <div class=\"upcoming__info--vote\">\n                        <p class=\"upcoming__text\"><span class =\"upcoming__light--black\">Vote/Votes</span>\n                        <div class=\"upcoming__info--votes\"><span class=\"upcoming__info--white\">${vote_average}</span> <span\n                                class=\"slash\">/</span>\n                            <span class=\"upcoming__info--white\">\n                               ${vote_count}</span>\n                        </div>\n                        </p>\n                    </div>\n                </div>\n                <div class=\"upcoming__info--right\">\n                    <div class=\"upcoming__info--pop\">\n                        <p class=\"upcoming__text\"> <span class =\"upcoming__light--black\">Popularity</span> <span class=\"upcoming__info--pop--range\">${popularity}</span> </p>\n                    </div>\n                    <div class=\"upcoming__info--genre\">\n                        <p class=\"upcoming__text\"><span class =\"upcoming__light--black\">Genre</span> <span class=\"upcoming__info--genre--kind\">${genreNames}</span> </p>\n                    </div>\n                </div>\n            </div>\n            <h2 class=\"upcoming__info--about\">ABOUT</h2>\n\n            <p class=\"upcoming__info--description\">${overview}</p>\n            <button class=\"upcoming__remindme--btn\" data-movieid=${id}  type=\"button\">Remind me</button>\n        </div>\n\n   \n     `;\n}\n\nasync function getGenresById(genreIds) {\n  const API_KEY = '249f222afb1002186f4d88b2b5418b55';\n  const BASE_URL = `https://api.themoviedb.org/3/genre/movie/list`;\n\n  const response = await fetch(`${BASE_URL}?api_key=${API_KEY}&language=en-US`);\n  const data = await response.json();\n\n  const genreNames = genreIds.map(genreId => {\n    const genre = data.genres.find(genre => genre.id === genreId);\n    return genre.name;\n  });\n\n  return genreNames.join(', ');\n}\n\n","const URL = 'https://api.themoviedb.org/3/trending/movie/week?api_key=249f222afb1002186f4d88b2b5418b55';\n\nimport axios from \"axios\";\nimport { IMG_BASE_URL, BASE_URL, IMG_W400, API_KEY } from './api-vars';\n \nconst galleryList = document.querySelector(\".gallery-weekly__list\");\n\nfunction getTrendData() {\nconst URL = 'https://api.themoviedb.org/3/trending/movie/week?api_key=249f222afb1002186f4d88b2b5418b55';\n\n    return axios.get(URL).then((data) => {\n        //  incrementPage();\n         \n         return data.data\n      })\n} \n\nasync function getMovieGenres() {\n  const { data } = await axios.get(\n    `${BASE_URL}/genre/movie/list?api_key=${API_KEY}`\n    );\n  return data;\n}\n\n// export async function getGenres() {\n//     const genres = await getMovieGenres().then(({ genres }) => genres);\n//     // console.log(genres);\n//   for (const genre of genres) {\n//     // console.log(genre);\n//     const { id, name } = genre;\n//     const fullName = await getTrendData().then(({ results }) => results);\n//     const oneCard = fullName.forEach(result => {\n//       // console.log(result.genre_ids);\n//       const genre_ids = result.genre_ids;\n//       if (genre_ids.length > 2) {\n//         const sliceGanre = genre_ids.slice(0, 2);\n//         // console.log(sliceGanre);\n//         if (sliceGanre.includes(genre.id)) {\n//           console.log(genre.name);\n//           const ganreName = genre.name;\n//         }\n//       }\n//     })\n      \n//     const createMarkup = createMarkup(results);\n// return galleryList.innerHTML = createMarkup\n  // }\n\n\n  \n// }\n\nexport async function getGenres() {\n  const genres = await getMovieGenres().then(({ genres }) => genres);\n\n  return { genres };\n}\n\n// В createMarkup добавлен id и его вывод на карточку для работы модалки Евгения --- Виктор\nfunction renderMarkup(results) {\n  //  console.log(results);\n   getGenres().then(({ genres }) => {\n    // console.log(genres);\n    if (results) {\n      results.forEach(film => {\n        const { genre_ids, release_date } = film;\n        genres.forEach(({ name, id }) => {\n          if (genre_ids.includes(id)) {\n            if (genre_ids.length > 2) {\n              genre_ids.splice(2, genre_ids.length - 1);\n            }\n            genre_ids.splice(genre_ids.indexOf(id), 1, name);\n          }\n          film.genre_names = genre_ids.join(', ');\n          if (film.release_date) {film.release_date = release_date.slice(0, 4);}\n        });\n      });\n      const markupList = createMarkup(results);\n    if (galleryList) {\n      galleryList.innerHTML = markupList;\n      // console.log(markupList);\n    }\n    }\n  });\n}\n \n\nfunction createMarkup(results) {\n  // console.log(results);\n  return results.slice(0, 3).map(({ original_title, release_date, genre_ids, poster_path, vote_average, id}) => {\n    let posterIMG = ``;\n    if (poster_path) {\n      posterIMG = `${IMG_BASE_URL}${IMG_W400}${poster_path}`;\n    } else {\n      posterIMG = 'https://i.ibb.co/C0LFwTh/OIF.jpg';\n    }\n\n    let starIcons = '';\n    for (let i = 1; i <= 5; i++) {\n      let starClass = 'fa-star-o';\n      if (i * 2 < vote_average) {\n        starClass = 'fa-star';\n      } else if (i * 2 - 1 < vote_average) {\n        starClass = 'fa-star-half-o';\n      }\n      starIcons += `<span class=\"fa star ${starClass}\"> </span>`;\n    }\n    return  ` <li class='gallery-weekly__list-elem hover-cursor' data-id='${id}'>           \n        <img class='gallery-weekly__image' src=\"${posterIMG}\" alt=\"${original_title}\" loading=\"lazy\" data-id='${id}'>\n       <div class='gallery-weekly__all-info'> \n        <div class=\"gallery-weekly__info\">\n            <h3 class= 'gallery-weekly__title'>${original_title}</h3>\n            <div class='cards-list_second_line'>\n              <div class='cards-list__text'>\n                <p>${genre_ids} | ${release_date}</p>\n              </div>\n            </div>\n        </div>\n        <div class='star-rate'>\n                ${starIcons}\n        </div>\n      </div>\n    </li>`\n  }).join('') \n\n//    return galleryList.insertAdjacentElement(\"beforeend\", markup);\n    // return galleryList.innerHTML = markup\n    // return console.log(markup)\n      \n    // return markup;\n}\n\n// getTrendData().then(({ results }) => {\n//     // console.log(results.genre_ids)\n//      return createMarkup(results);\n   \n// })\n\nexport const getWeeklyTrends = getTrendData().then(({ results }) => {\n    // console.log(results)\n    return renderMarkup(results);\n})\n\n\n"],"names":["parcelRequire","$7Y9D8","$65414923e0a79c46$var$UPCOMING_URL","$6RiD3","BASE_URL","$65414923e0a79c46$var$upcomingBlock","document","querySelector","$65414923e0a79c46$var$randomMovie","$65414923e0a79c46$var$movieId","$65414923e0a79c46$var$remindBtn","$65414923e0a79c46$var$onClickRemind","event","movieId1","target","dataset","movieid","$Iwkks","getMovieFromLibrary","removeMovieFromLibrary","textContent","addMovieToLibrary","titleMovie","title","$parcel$interopDefault","Notify","success","async","$65414923e0a79c46$var$getGenresById","genreIds","response","fetch","data","json","map","genreId","genres","find","genre","id","name","join","returnedResult","API_KEY","then","movieData","ok","failure","Error","status","$65414923e0a79c46$var$fetchUpcomingMovies","results","length","Math","floor","random","genreNames","genre_ids","createdMarkup","poster_path","backdrop_path","overview","popularity","vote_average","vote_count","release_date","$65414923e0a79c46$var$renderMarkup","insertAdjacentHTML","movieId2","remindBtn1","addEventListener","error","console","log","$65414923e0a79c46$var$getFetchedMovies","$2shzp","$c10c282de78da56f$var$galleryList","$c10c282de78da56f$export$c5604fa8028da00","default","get","$c10c282de78da56f$var$getMovieGenres","$c10c282de78da56f$var$renderMarkup","forEach","film","includes","splice","indexOf","genre_names","slice","markupList","original_title","posterIMG","IMG_BASE_URL","IMG_W400","starIcons","i","starClass","$c10c282de78da56f$var$createMarkup","innerHTML"],"version":3,"file":"index.4e412d56.js.map"}